<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://climate.umt.edu/feed.xml" rel="self" type="application/atom+xml" /><link href="https://climate.umt.edu/" rel="alternate" type="text/html" /><updated>2024-07-31T12:04:50-06:00</updated><id>https://climate.umt.edu/feed.xml</id><title type="html">Montana Climate Office</title><subtitle>The official website of the Montana Climate Office. </subtitle><author><name>Colin Brust</name></author><entry><title type="html">Montana Climate Office Introduces the CSKT PurpleAir Air Quality Sensor Network</title><link href="https://climate.umt.edu/hardware/2024/07/29/cskt-purpleair.html" rel="alternate" type="text/html" title="Montana Climate Office Introduces the CSKT PurpleAir Air Quality Sensor Network" /><published>2024-07-29T00:00:00-06:00</published><updated>2024-07-29T00:00:00-06:00</updated><id>https://climate.umt.edu/hardware/2024/07/29/cskt-purpleair</id><content type="html" xml:base="https://climate.umt.edu/hardware/2024/07/29/cskt-purpleair.html"><![CDATA[<p>The Confederated Salish &amp; Kootenai Tribes (CSKT) and the Montana Climate Office (MCO) are excited to announce the launch of the CSKT PurpleAir Air Quality Sensor Network, an integral part of the <em>Native Drought Resilience</em> project. <em>Native Drought Resilience</em> is a collaborative effort between CSKT, Salish Kootenai College, the Montana Climate Office at the University of Montana, and the Wilderness Society. Funded by <a href="https://www.drought.gov" target="_blank">NOAA’s National Integrated Drought Information System</a>, <em>Native Drought Resilience</em> aims to enhance drought and climate resilience and education across the Flathead Reservation.</p>

<h3 id="project-overview">Project Overview</h3>

<p><em>Native Drought Resilience</em> is implementing several actions outlined in the updated <a href="http://csktclimate.org/index.php/resources/ongoing-work/" target="_blank">CSKT Climate Change Strategic Plan</a>. A key component is the installation and maintenance of a network of low-cost PurpleAir air quality sensors throughout the Flathead Reservation. <a href="https://www2.purpleair.com" target="_blank">PurpleAir</a> sensors are WiFi-enabled and continuously measure fine particle pollution (PM2.5), offering a local view of wildfire smoke, air pollution, and potential health impacts.</p>

<p>This network builds upon previous PurpleAir sensor deployments funded by <a href="https://www.montanahphc.org" target="_blank"><em>Montana Health Professionals for a Healthy Climate</em> (MontanaHPHC)</a> and the <a href="https://deq.mt.gov" target="_blank"><em>Montana Department of Environmental Quality</em> (DEQ)</a>, as well as several PuepleAir sensors deployed on the Flathead Reservation by private individuals. With NIDIS funding, the <em>Native Drought Resilience</em> team has installed sensors both indoors and outdoors at essential community locations, including schools, health centers, and Tribal government offices.</p>

<p>Flathead Reservation residents can use these sensors for real-time health and safety assessments, while educators can incorporate air quality data into environmental science and health curricula such as those available from the <a href="https://native-climate.com/education/" target="_blank">Native Climate project</a>.</p>

<h3 id="real-time-monitoring">Real-Time Monitoring</h3>

<p>Access the real-time PurpleAir sensor data on an interactive map at the following link: <a href="https://climate.umt.edu/cskt-air-quality/" target="_blank">https://climate.umt.edu/cskt-air-quality/</a>. Data from the CSKT Air Quality network are also available on the <a href="https://fire.airnow.gov" target="_blank">AirNow Fire and Smoke Map</a>.</p>

<h3 id="project-leadership">Project Leadership</h3>

<ul>
  <li><strong>Kyle Bocinsky and Maureen McCarthy</strong> (Montana Climate Office)</li>
  <li><strong>Mike Durglo</strong> (CSKT, Cultural Preservation)</li>
  <li><strong>René Dubay</strong> (Salish Kootenai College Extension)</li>
</ul>

<h3 id="purpleair-sensor-locations">PurpleAir Sensor Locations</h3>

<p>Currently, the CSKT PurpleAir Air Quality Sensor Network includes 38 sensors deployed across the Flathead Reservation at the following locations:</p>

<ul>
  <li><strong>CSKT Bison Range Visitors Center</strong> (indoor and outdoor)</li>
  <li><strong>Salish Kootenai College Extension</strong> (indoor and outdoor)</li>
  <li><strong>CSKT Elementary, Middle, and High Schools</strong> (indoor and outdoor)
    <ul>
      <li>Arlee High School <sup>*+</sup></li>
      <li>Charlo High School</li>
      <li>Dayton Elementary</li>
      <li>Hot Springs High School <sup>*</sup></li>
      <li>Polson High School</li>
      <li>Polson Middle School <sup>*</sup></li>
      <li>Ronan High School <sup>*</sup></li>
      <li>Ronan Middle School</li>
      <li>St. Ignatius High School <sup>*</sup></li>
      <li>Dixon Elementary (monitors forthcoming)</li>
    </ul>
  </li>
  <li><strong>CSKT Tribal Health Buildings</strong> (indoor and outdoor)
    <ul>
      <li>Arlee Health Center</li>
      <li>St. Ignatius Health Center</li>
      <li>Ronan Health Center</li>
      <li>Salish Kootenai College Health Center</li>
      <li>Polson Health Center</li>
      <li>Elmo Health Center</li>
      <li>Hot Springs Health Center</li>
      <li>Kicking Horse Health Center</li>
    </ul>
  </li>
</ul>

<p><sup>*</sup> PurpleAir sensor installed through MontanaHPHC.<br />
<sup>+</sup> PurpleAir sensor installed through the Montana DEQ.</p>

<h3 id="live-map">Live Map</h3>

<p>The latest data from the CSKT PurpleAir Air Quality Sensor Network is available through a live map at <a href="https://climate.umt.edu/cskt-air-quality/" target="_blank">https://climate.umt.edu/cskt-air-quality/</a>, or simply click on the map below:</p>

<div>
<div style="position:relative;padding-top:80%;cursor:pointer;" onclick="window.open('https://climate.umt.edu/cskt-air-quality/','_blank');">
<iframe src="https://climate.umt.edu/cskt-air-quality/" frameborder="0" allow="fullscreen" style="position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;"></iframe>
</div>
</div>

<h3 id="instrumentation">Instrumentation</h3>

<p>The <a href="https://www2.purpleair.com/products/purpleair-zen/" target="_blank"><strong>PurpleAir Zen</strong></a> measures real-time PM2.5 levels and features a full-color LED for instant air quality indication. Built-in WiFi allows data transmission to the real-time <a href="https://map.purpleair.com" target="_blank">PurpleAir Map</a>, accessible via any smart device. For areas with limited WiFi, the Zen includes a real-time clock and SD card capabilities for data storage. The monitor features replaceable PMS6003 laser counters and an expansion port for future upgrades. More information about the technology used in PurpleAir sensors is available on the <a href="https://www2.purpleair.com/pages/technology/" target="_blank">PurpleAir website</a>.</p>

<h3 id="background">Background</h3>

<p>The Confederated Salish &amp; Kootenai Tribes (CSKT) of the Flathead Reservation were pioneers in drafting a <a href="http://csktclimate.org/downloads/Climate%20Change%20Strategic%20Plan/CSKT%20Climate%20Change%20Adaptation%20Plan%204.14.16.pdf" target="_blank">Climate Change Strategic Plan</a> in 2013, updated in 2016. This plan emphasizes understanding drought impacts on forests, water and air quality, and critical resources while developing a drought management plan.</p>

<p>In 2020, the CSKT Climate Change Advisory Committee (CCAC) began a new revision to the CSKT Climate Change Strategic Plan. This new “living” plan outlines climate impacts and resilience actions that the tribes are undertaking to mitigate these effects. CSKT climate resilience efforts blend traditional ecological knowledge (TEK) with Western scientific understanding to address climate challenges such as drought, wildfires, and extreme weather.</p>

<p>The CSKT Climate Change Strategic Plan has received support from The Wilderness Society, Crown Managers Partnership <a href="https://www.crownmanagers.org/five-needle-pine-working-group/" target="_blank">Hi5 Working Group</a>, <a href="https://nativewaters-aridlands.com" target="_blank">Native Waters on Arid Lands</a>, <a href="https://native-climate.com" target="_blank">Native Climate</a>, and the <a href="https://climate.umt.edu" target="_blank">Montana Climate Office</a>. Implementation actions are funded through individual CSKT departments, including <a href="https://www.csktnrd.org" target="_blank">Natural Resources</a>, <a href="http://csktfire.org" target="_blank">Fire Management</a>, the <a href="https://skha.org" target="_blank">Salish &amp; Kootenai Housing Authority</a>, and <a href="https://www.csktribes.org/index.php/history-culture/cultural-preservation" target="_blank">Cultural Preservation</a>.</p>

<h3 id="council-approval">Council Approval</h3>

<p>The CSKT Tribal Council approved the installation of PurpleAir monitors as part of the <em>Native Drought Resilience</em> project on <a href="https://www.csktribes.org/index.php/component/rsfiles/download?path=Tribal+Council%2FMinutes%2F2023%2FAug%2F081723+Minutes.pdf&amp;Itemid=101" target="_blank">August 17, 2023</a>.</p>

<h3 id="project-contacts">Project Contacts</h3>

<ul>
  <li>
    <p><strong>Kyle Bocinsky</strong><br />
Director of Climate Extension<br />
Montana Climate Office, University of Montana<br />
Email: <a href="mailto:kyle.bocinsky@umontana.edu" target="_blank">kyle.bocinsky@umontana.edu</a><br />
Phone: (770) 362-6659</p>
  </li>
  <li>
    <p><strong>Michael Durglo, Jr.</strong><br />
Climate Change Coordinator<br />
Climate Change Advisory Committee Chairman<br />
Confederated Salish and Kootenai Tribes<br />
Email: <a href="mailto:michael.durglo@cskt.org" target="_blank">michael.durglo@cskt.org</a><br />
Phone: (406) 261-8903</p>
  </li>
</ul>

<hr />

<h3 id="about-the-montana-climate-office">About the Montana Climate Office</h3>

<p>The <a href="https://climate.umt.edu" target="_blank">Montana Climate Office</a> provides high-quality, timely, relevant, and scientifically based climate, drought and water resources information and services to Montanans. As Montana’s official climate data stewards, we strive to provide information for specific sectors of interest by either geography or industry, and assist stakeholders in adapting climate products to their needs. The MCO leads the development of the <a href="https://climate.umt.edu/mesonet/" target="_blank">Montana Mesonet</a>, a cooperative statewide soil moisture and meteorological information network that supports decision-making in agriculture, range, and forested watershed contexts. The MCO is part of the <a href="https://www.umt.edu/environment/research/mfces.php" target="_blank">Montana Forest and Conservation Experiment Station</a> in the <a href="https://www.umt.edu/environment/" target="_blank">WA Franke College of Forestry and Conservation</a> at the University of Montana.</p>

<hr />]]></content><author><name>{&quot;position&quot;=&gt;&quot;Director of Climate Extension&quot;, &quot;avatar&quot;=&gt;&quot;/assets/images/bocinsky.jpg&quot;, &quot;bio&quot;=&gt;&quot;Kyle helps make climate data and services accessible for all Montanans.&quot;, &quot;team&quot;=&gt;&quot;it&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;, &quot;url&quot;=&gt;&quot;mailto:kyle.bocinsky@mso.umt.edu&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/bocinsky&quot;}]}</name></author><category term="Hardware" /><category term="Tribal" /><category term="PurpleAir" /><summary type="html"><![CDATA[The Confederated Salish &amp; Kootenai Tribes (CSKT) and the Montana Climate Office (MCO) are excited to announce the launch of the CSKT PurpleAir Air Quality Sensor Network, an integral part of the Native Drought Resilience project. Native Drought Resilience is a collaborative effort between CSKT, Salish Kootenai College, the Montana Climate Office at the University of Montana, and the Wilderness Society. Funded by NOAA’s National Integrated Drought Information System, Native Drought Resilience aims to enhance drought and climate resilience and education across the Flathead Reservation.]]></summary></entry><entry><title type="html">How to Set Up UTM and ArcGIS on a Mac</title><link href="https://climate.umt.edu/guides/2023/10/27/utm-arcgis.html" rel="alternate" type="text/html" title="How to Set Up UTM and ArcGIS on a Mac" /><published>2023-10-27T00:00:00-06:00</published><updated>2023-10-27T00:00:00-06:00</updated><id>https://climate.umt.edu/guides/2023/10/27/utm-arcgis</id><content type="html" xml:base="https://climate.umt.edu/guides/2023/10/27/utm-arcgis.html"><![CDATA[<p>Below is a tutorial on how to spin up a Windows virtual machine and install ArcGIS on the new Mac machines with Apple Silicon chips.</p>

<head>
    <script src="https://cdn.jsdelivr.net/npm/showdown@1.9.1/dist/showdown.min.js"></script>
</head>
<div id="response-container"></div>
<script>
  const url = 'https://data.climate.umt.edu/website/assets/arcgis_mac.md'

  const responseContainer = document.getElementById('response-container');

  fetch(url, {
    method: 'GET',
  })
  .then(response => {
    if (response.ok) {
      return response.text();
    } else {
      throw new Error('Failed to fetch data');
    }
  })
      .then(markdownText => {
        const converter = new showdown.Converter();
        const htmlText = converter.makeHtml(markdownText);
        responseContainer.innerHTML = htmlText;
  })
  .catch(error => {
    // Handle any errors
    console.error(error);
  });
</script>]]></content><author><name>{&quot;position&quot;=&gt;&quot;Director of Climate Extension&quot;, &quot;avatar&quot;=&gt;&quot;/assets/images/bocinsky.jpg&quot;, &quot;bio&quot;=&gt;&quot;Kyle helps make climate data and services accessible for all Montanans.&quot;, &quot;team&quot;=&gt;&quot;it&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;, &quot;url&quot;=&gt;&quot;mailto:kyle.bocinsky@mso.umt.edu&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/bocinsky&quot;}]}</name></author><category term="Guides" /><category term="UTM" /><category term="ArcGIS" /><category term="How to" /><summary type="html"><![CDATA[Below is a tutorial on how to spin up a Windows virtual machine and install ArcGIS on the new Mac machines with Apple Silicon chips.]]></summary></entry><entry><title type="html">Backing up a Dockerized Community Edition Neo4j Database</title><link href="https://climate.umt.edu/code/2022/08/19/backup-neo4j.html" rel="alternate" type="text/html" title="Backing up a Dockerized Community Edition Neo4j Database" /><published>2022-08-19T00:00:00-06:00</published><updated>2022-08-19T00:00:00-06:00</updated><id>https://climate.umt.edu/code/2022/08/19/backup-neo4j</id><content type="html" xml:base="https://climate.umt.edu/code/2022/08/19/backup-neo4j.html"><![CDATA[<p><a href="https://neo4j.com/">Neo4j</a> is a platform for managing graph databases. The Montana Climate Office uses Neo4j Community Edition to manage a database of satellite data associated with each of our Mesonet stations (learn more on our <a href="https://github.com/mt-climate-office/mt-mesonet-satellite">GitHub</a>). The database is queried by the <a href="https://mesonet.climate.umt.edu/dash/">Montana Mesonet Dashboard</a> to plot and contextualize current conditions at each Mesonet station. The database is extremely performant and can query over 20 years of data at a given station in a fraction of a second! The database is stood up in a Docker container for ease of mobility and reproducibility.</p>

<h1 id="the-problem">The Problem</h1>
<p>While we were developing the database, we ran into a roadblock when implementing a method to operationally backup the data. There are numerous tutorials online explaining how to backup a Neo4j database, but they all rely on the paid Enterprise Edition of Neo4j. The Enterprise Edition simply allows you to run the <code class="language-plaintext highlighter-rouge">neo4j-admin backup</code> command on an active database to dump the data into an archived file. In the Community Edition however, you have to use the <code class="language-plaintext highlighter-rouge">neo4j-admin dump</code> command on a stopped database to backup the data. While this seems simple enough, problems arise when using this method within a Docker container. To run the <code class="language-plaintext highlighter-rouge">neo4j-admin dump</code> command, you first have to run <code class="language-plaintext highlighter-rouge">neo4j stop</code> to stop all the databases. Because the default Neo4j Docker image depends on Neo4j to be up and running, this causes the Docker container to shut down, making it impossible to run the <code class="language-plaintext highlighter-rouge">neo4j-admin dump</code> command.</p>

<h1 id="our-solution">Our Solution</h1>
<p>To work around this problem, we extended the Neo4j Docker image so the container wouldn’t stop when Neo4j was stopped. Then, we used <code class="language-plaintext highlighter-rouge">cron</code> to run a backup script every night. Here is what the new <code class="language-plaintext highlighter-rouge">Dockerfile</code> looks like:</p>
<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> neo4j:4.4.8-community</span>

<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span>    apt-get <span class="nt">-y</span> <span class="nb">install </span>cron 

<span class="c"># Copy the backup script into the container. </span>
<span class="k">COPY</span><span class="s"> ./backup.sh /opt/backup.sh</span>

<span class="c"># Make a directory to store the backed up data in. </span>
<span class="k">RUN </span><span class="nb">mkdir</span> <span class="nt">-p</span> /dumps/neo4j

<span class="c"># Give execution rights on the cron job</span>
<span class="k">RUN </span><span class="nb">chmod </span>u+x /opt/backup.sh

<span class="c"># Copy environment and shell into the crontab</span>
<span class="k">RUN </span><span class="nb">env</span> <span class="o">&gt;&gt;</span> ~/env.log
<span class="k">RUN </span><span class="nb">echo</span> <span class="s1">'PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'</span> <span class="o">&gt;</span> /etc/crontab
<span class="k">RUN </span><span class="nb">echo</span> <span class="s1">'SHELL=/bin/bash'</span> <span class="o">&gt;&gt;</span> /etc/crontab

<span class="c"># Make our backup script run at 6am UTC every day.</span>
<span class="k">RUN </span><span class="nb">echo</span> <span class="s1">'0 6 * * * root bash -c "source $HOME/env.log; source /opt/backup.sh"'</span> <span class="o">&gt;&gt;</span> /etc/crontab

<span class="c"># Create the log file to be able to run tail.</span>
<span class="k">RUN </span><span class="nb">touch</span> /var/log/cron.log

<span class="c"># Run the tail on the cron log so the container won't stop when Neo4j is stopped. </span>
<span class="k">CMD</span><span class="s"> tail -f /var/log/cron.log</span>
</code></pre></div></div>

<p>The backup script that is copied into the Docker container simply stops Neo4j, dumps the latest snapshot of the database into the <code class="language-plaintext highlighter-rouge">/dumps/neo4j</code> folder, then restarts Neo4j:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
/var/lib/neo4j/bin/neo4j stop
/var/lib/neo4j/bin/neo4j-admin dump <span class="nt">--database</span><span class="o">=</span>neo4j <span class="nt">--to</span><span class="o">=</span>/dumps/neo4j/backup_<span class="si">$(</span><span class="nb">date</span> +%Y%m%d%H%M<span class="si">)</span>.dump
/var/lib/neo4j/bin/neo4j start
</code></pre></div></div>

<p>We run the Neo4j container with another Docker container that updates the database with new satellite data, so we use <code class="language-plaintext highlighter-rouge">docker compose</code> to stand up the database. Here is what the relevant portions of our <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> look like:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.9'</span>

<span class="na">services</span><span class="pi">:</span>
    <span class="na">neo4j</span><span class="pi">:</span>
        <span class="na">container_name</span><span class="pi">:</span> <span class="s">neo4j</span>
        <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
        <span class="na">build</span><span class="pi">:</span> <span class="s">./neo4j</span>
        <span class="na">volumes</span><span class="pi">:</span>
          <span class="c1"># Map volumes to machine so data is persisted between containers.</span>
          <span class="pi">-</span> <span class="s">/neo4j/data:/data</span> 
          <span class="pi">-</span> <span class="s">/neo4j/logs:/logs</span> 
          <span class="pi">-</span> <span class="s">/neo4j/import:/var/lib/neo4j/import</span> 
          <span class="pi">-</span> <span class="s">/neo4j/plugins:/plugins</span>
          <span class="c1"># The db-backups volume points to an external NAS server to </span>
          <span class="c1"># store the data on. </span>
          <span class="pi">-</span> <span class="s">db-backups:/dumps</span>
        <span class="na">ports</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s2">"</span><span class="s">7474:7474"</span>
          <span class="pi">-</span> <span class="s2">"</span><span class="s">7687:7687"</span>
        <span class="na">env_file</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">.env</span>

<span class="na">volumes</span><span class="pi">:</span>
    <span class="na">db-backups</span><span class="pi">:</span>
      <span class="na">driver</span><span class="pi">:</span> <span class="s">local</span>
      <span class="na">driver_opts</span><span class="pi">:</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">nfs</span>
        <span class="na">o</span><span class="pi">:</span> <span class="s">nfsvers=4,addr=${nfsIP},nolock,soft,rw</span>
        <span class="na">device</span><span class="pi">:</span> <span class="s">$nfsPath</span>
</code></pre></div></div>

<p>Unfortunately, we are so far unable to find a method for starting the <code class="language-plaintext highlighter-rouge">cron</code> service that operationally runs the backups within the <code class="language-plaintext highlighter-rouge">Dockerfile</code> without breaking Neo4j. To address this, we use a deploy script that starts the container and then starts <code class="language-plaintext highlighter-rouge">cron</code> after the container is stood up:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># Get latest changes</span>
git pull origin main
<span class="c"># Start docker containers</span>
docker compose up <span class="nt">--build</span> <span class="nt">-d</span>
<span class="c"># Start cron</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> neo4j service cron start
<span class="c"># Make sure Neo4j is running</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> neo4j neo4j start
</code></pre></div></div>

<h1 id="restoring-the-database">Restoring the Database</h1>
<p>Now, if the data get deleted, your server crashes, or anything else happens to your data, you have a backup that can be used to restore the database. To restore the database, you just have to run the <code class="language-plaintext highlighter-rouge">neo4j-admin load</code> command before deploying the database with docker compose:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--interactive</span> <span class="nt">--tty</span> <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">--volume</span><span class="o">=</span>path/to/data/in/docker-compose:/data <span class="se">\ </span>
    <span class="nt">--volume</span><span class="o">=</span>path/to/dumps/in/docker-compose:/dumps <span class="se">\ </span>
    neo4j:4.4.8 <span class="se">\</span>
    neo4j-admin load <span class="nt">--database</span><span class="o">=</span>neo4j <span class="nt">--from</span><span class="o">=</span>/dumps/&lt;name_of_latest_backup&gt;.dump
</code></pre></div></div>
<p>Running the above command reads the latest <code class="language-plaintext highlighter-rouge">.dump</code> file and puts the data into the <code class="language-plaintext highlighter-rouge">/data</code> folder in a format that is readable by Neo4j. After running this command, running the above deploy script will stand up the database with data from the latest backup!</p>]]></content><author><name>{&quot;position&quot;=&gt;&quot;Climate Data Specialist&quot;, &quot;avatar&quot;=&gt;&quot;/assets/images/brust.jpg&quot;, &quot;bio&quot;=&gt;&quot;Colin develops and maintains the API, dashboard and database for the Montana Mesonet.&quot;, &quot;team&quot;=&gt;&quot;it&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;, &quot;url&quot;=&gt;&quot;mailto:colin.brust@mso.umt.edu&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/colinbrust&quot;}]}</name></author><category term="Code" /><category term="Neo4j" /><category term="Docker" /><category term="Backup" /><category term="How to" /><summary type="html"><![CDATA[Neo4j is a platform for managing graph databases. The Montana Climate Office uses Neo4j Community Edition to manage a database of satellite data associated with each of our Mesonet stations (learn more on our GitHub). The database is queried by the Montana Mesonet Dashboard to plot and contextualize current conditions at each Mesonet station. The database is extremely performant and can query over 20 years of data at a given station in a fraction of a second! The database is stood up in a Docker container for ease of mobility and reproducibility.]]></summary></entry><entry><title type="html">Configuring an EnviroCams PTZ Camera</title><link href="https://climate.umt.edu/hardware/2022/08/05/envirocam-setup.html" rel="alternate" type="text/html" title="Configuring an EnviroCams PTZ Camera" /><published>2022-08-05T00:00:00-06:00</published><updated>2022-08-05T00:00:00-06:00</updated><id>https://climate.umt.edu/hardware/2022/08/05/envirocam-setup</id><content type="html" xml:base="https://climate.umt.edu/hardware/2022/08/05/envirocam-setup.html"><![CDATA[<p>As part of Upper Missouri River Basin Plains Snowpack and Soil Moisture Monitoring program, daily photos are provided from each mesonet station. At the Montana Climate Office, we use <a href="https://www.envirocams.com/">EnviroCams</a> iPatrol PTZ cameras to take these photos at each station. These cameras are great to have in the field because they take quality photos and are able to operate in the extreme heat and cold seen across Montana. However, the documentation that comes with the camera is very lacking, making it difficult for new users to get the cameras setup for their needs. Below is an overview of how we setup our cameras in hopes that it can help others with their setup process. This tutorial assumes the camera is in a remote setting and is connected to the internet via a cell modem with a static I.P. address.</p>

<p><strong>NOTE</strong>: Unfortunately, you need a Windows machine with Internet Explorer to fully configure the iPatrol camera. You are able to connect with a Mac/Linux machine and Firefox/Chrome, but some of the functionality is lacking. The latest <a href="https://www.envirocams.com/tech-support/#tab_firmware">firmware update</a> fixed some of these issues, but Internet Explorer is still the only browser that we have found supports all of the camera’s features.</p>

<h1 id="configuring-the-camera">Configuring the Camera</h1>
<h3 id="power-up-camera">Power Up Camera</h3>
<ul>
  <li>Plug camera into 12v DC power supply.</li>
  <li>Connect camera to computer with ethernet cable.</li>
</ul>

<h3 id="adjust-computers-ip-settings">Adjust Computer’s I.P. Settings</h3>
<ul>
  <li>On your Windows machine, go to settings -&gt; Network and Internet -&gt; Ethernet -&gt; right-click -&gt; properties -&gt; double-click “Internet Protocol Version 4 (TCP/IPv4)”</li>
  <li>Change:
    <ul>
      <li>IP address to 192.168.1.1</li>
      <li>Subnet mask to 255.255.255.0</li>
      <li>Default gateway to 192.168.1.1</li>
    </ul>
  </li>
  <li><strong>NOTE</strong> Out of the box, the camera should have an I.P. address of 192.168.1.13. If for some reason the address is different, the first three numbers of theIPv4 address must match the first three number’s of the camera’s IP (in this case 192.168.1) in order to connect.</li>
</ul>

<h3 id="connect-to-camera-and-upload-firmware">Connect to Camera and Upload Firmware</h3>
<ul>
  <li>Connect the camera to the computer with an Ethernet cable.</li>
  <li>Open Internet Explorer and go to https://192.168.1.13
    <ul>
      <li>This should open an EnviroCams login page.
        <ul>
          <li>At the bottom of the page, there should be a popup asking you to download the latest updates. Download and run the executable.</li>
          <li>The camera should restart and the login page will reload.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Login with the default username (admin) and password (123456).</li>
  <li>Update the camera’s firmware by navigationg to Setup &gt; System &gt; Maintenance &gt; Local Upgrade &gt; Browse…
    <ul>
      <li>Select the firmware file downloaded from the <a href="https://www.envirocams.com/tech-support/#tab_firmware">EnviroCams website</a>.</li>
      <li>The firmware will take a few minutes to upload and apply. Once the changes are made, the camera should restart and you will be taken to the login screen.</li>
      <li>When logging back in, you will be prompted to update your password.</li>
    </ul>
  </li>
</ul>

<h3 id="enable-communication-with-modem">Enable Communication with Modem</h3>
<ul>
  <li>Navigate to Setup -&gt; Network -&gt; Network. Change:
    <ul>
      <li>Obtain IP Address to “Static”</li>
      <li>IP Address XXX.XXX.XXX.XXX (Here, the first three groups of numbers need to be the same as the first three groups of numbers of the modem’s local IP).</li>
      <li>Subnet Mask to 255.255.255.0</li>
      <li>Default Gateway to XXX.XXX.XXX.XXX (the same as the modem’s local IP).</li>
      <li>Click ‘save’
        <ul>
          <li>This will reboot the camera and you will be logged out. You will need to repeat the IPv4 change steps above and set the ethernet adapter’s I.P. address, subnet mask and default gateway to accommodate the new I.P. address of the modem.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Login to Modem’s user interface (these steps will vary depending on the type of modem you have)
    <ul>
      <li>In your modem’s port forwarding settings:
        <ul>
          <li>Forward port 80 and from the camera’s local I.P. address and set the destination port to a port that is not in use (like 1234). Port 80 is already in use by most modems. Forwarding port 80 will allow access to the camera’s user interface remotely.</li>
          <li>Forward port 554 from the camera’s local I.P. address. Port 554 is used for the ‘Real Time Streaming Protocol’ and allows the video feed from the camera to stream remotely.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Connect camera to the modem with an Ethernet cable and make sure both the camera and modem have power.
    <ul>
      <li>If everything is setup properly, you should be able to remotely access the camera’s user interface by navigating to http://{modem’s IP address}:{destination port you set above}.</li>
    </ul>
  </li>
</ul>

<h3 id="change-cameras-storage-settings">Change Camera’s Storage Settings</h3>
<p>At the Montana Mesonet, we only use the camera for taking photos. If you need to take video, you will need to adjust the storage settings accordingly.</p>
<ul>
  <li>In the camera’s user interface, navigate to Setup &gt; Storage</li>
  <li>Under “Allocate Capacity”, change “Video” to 0 and “Common Snapshot” to 29705 (or whatever number was originally in “Video”. Essentiall. We just want all the storage allocated to the “Common Snapshot”).
    <ul>
      <li>This will cause the camera to restart.</li>
    </ul>
  </li>
</ul>

<h3 id="setup-time-server">Setup Time Server</h3>
<p>Setting up a time server will allow the camera to always have the correct timestamp on the images.</p>
<ul>
  <li>Navigate to Setup &gt; Common &gt; Time
    <ul>
      <li>First, click “Sync with Computer Time”</li>
      <li>Change “Sync Mode” to “Sync with NTP Server”
        <ul>
          <li>Set the timezone based on the UTC offset.</li>
          <li>Set NTP Server Address to time1.google.com</li>
          <li>Set Port to 123.</li>
          <li>Set Update interval to 1800 seconds.</li>
        </ul>
      </li>
      <li>Save changes</li>
    </ul>
  </li>
  <li>Setup Daylight Savings Offset
    <ul>
      <li>Navigate to Setup &gt; Common &gt; Time &gt; DST
        <ul>
          <li>Set ‘starts’ to 2nd Sunday of March at 02:00</li>
          <li>Set ‘ends’ to 1st Sunday of November at 02:00</li>
          <li>Save</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="adjust-the-cameras-preset-views">Adjust the Camera’s Preset Views</h3>
<ul>
  <li>Navigate to the Live View panel and click the play button in the bottom left corner. This should open up a live video feed from the camera.</li>
  <li>To set a preset view, use the arrows on the camera to navigate to and focus on the desired area.
    <ul>
      <li>Click the plus button at the bottom right of the screen.</li>
      <li>Add a name and number for the presets.</li>
    </ul>
  </li>
</ul>

<h3 id="set-the-cameras-patrol">Set the Camera’s Patrol</h3>
<ul>
  <li>Click the ‘Patrol’ tab on the right side of the Live View page.
    <ul>
      <li>Click ‘+’ to add a patrol, set:
        <ul>
          <li>Patrol No. -&gt; 1</li>
          <li>Patrol Name -&gt; Default</li>
          <li>Add desired locations from the preset views to the patrol.</li>
        </ul>
      </li>
      <li>Schedule the patrol:
        <ul>
          <li>Click the tiny little button in the bottom right corner of the screen that has three circles with lines connecting them.
            <ul>
              <li>Click the checkbox on the top left to enable the patrol.</li>
              <li>Under ‘Monday’ set the times of day you would like to do the patrol.</li>
              <li>Select the ‘default’ patrol that was just created.</li>
              <li>Click the ‘copy’ button and then paste it into each day of the week.</li>
              <li>Click ‘OK’.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="enable-scheduled-snapshots">Enable Scheduled Snapshots</h3>
<p>Unfortunately, the camera doesn’t automatically take photos when it arrives at preset positions. As such, our method is to take photos when we know the camera is at certain positions according to the patrol schedule.</p>

<ul>
  <li>Navigate to Setup &gt; Video &amp; Audio &gt; Snapshot</li>
  <li>Set:
    <ul>
      <li>Snapshot -&gt; “On”</li>
      <li>Snapshot Interval(s) -&gt; 1</li>
      <li>Number to Snapshot -&gt; 1</li>
      <li>Snapshot Mode -&gt; Schedule
        <ul>
          <li>Set times to match the patrol schedule.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Save changes.</li>
</ul>

<p>After configuring all these setting, your iPatrol camera should be ready for deployment!</p>]]></content><author><name>{&quot;position&quot;=&gt;&quot;Climate Data Specialist&quot;, &quot;avatar&quot;=&gt;&quot;/assets/images/brust.jpg&quot;, &quot;bio&quot;=&gt;&quot;Colin develops and maintains the API, dashboard and database for the Montana Mesonet.&quot;, &quot;team&quot;=&gt;&quot;it&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;, &quot;url&quot;=&gt;&quot;mailto:colin.brust@mso.umt.edu&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/colinbrust&quot;}]}</name></author><category term="Hardware" /><category term="EnviroCams" /><category term="FTP" /><category term="How to" /><summary type="html"><![CDATA[As part of Upper Missouri River Basin Plains Snowpack and Soil Moisture Monitoring program, daily photos are provided from each mesonet station. At the Montana Climate Office, we use EnviroCams iPatrol PTZ cameras to take these photos at each station. These cameras are great to have in the field because they take quality photos and are able to operate in the extreme heat and cold seen across Montana. However, the documentation that comes with the camera is very lacking, making it difficult for new users to get the cameras setup for their needs. Below is an overview of how we setup our cameras in hopes that it can help others with their setup process. This tutorial assumes the camera is in a remote setting and is connected to the internet via a cell modem with a static I.P. address.]]></summary></entry></feed>